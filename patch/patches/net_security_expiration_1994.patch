diff --git net/cert/ct_policy_enforcer.cc net/cert/ct_policy_enforcer.cc
index a4e1e81..f3c627d 100644
--- net/cert/ct_policy_enforcer.cc
+++ net/cert/ct_policy_enforcer.cc
@@ -33,15 +33,6 @@ namespace net {
 
 namespace {
 
-// Returns true if the current build is recent enough to ensure that
-// built-in security information (e.g. CT Logs) is fresh enough.
-// TODO(eranm): Move to base or net/base
-bool IsBuildTimely() {
-  const base::Time build_time = base::GetBuildTime();
-  // We consider built-in information to be timely for 10 weeks.
-  return (base::Time::Now() - build_time).InDays() < 70 /* 10 weeks */;
-}
-
 // Returns a rounded-down months difference of |start| and |end|,
 // together with an indication of whether the last month was
 // a full month, because the range starts specified in the policy
@@ -455,4 +446,13 @@ ct::EVPolicyCompliance CTPolicyEnforcer::DoesConformToCTEVPolicy(
   return details.status;
 }
 
+bool CTPolicyEnforcer::IsBuildTimely() const {
+  if (!enforce_net_security_expiration_)
+    return true;
+
+  const base::Time build_time = base::GetBuildTime();
+  // We consider built-in information to be timely for 10 weeks.
+  return (base::Time::Now() - build_time).InDays() < 70 /* 10 weeks */;
+}
+
 }  // namespace net
diff --git net/cert/ct_policy_enforcer.h net/cert/ct_policy_enforcer.h
index c49e091..d3edffa 100644
--- net/cert/ct_policy_enforcer.h
+++ net/cert/ct_policy_enforcer.h
@@ -100,6 +100,17 @@ class NET_EXPORT CTPolicyEnforcer {
       const ct::EVCertsWhitelist* ev_whitelist,
       const SCTList& verified_scts,
       const BoundNetLog& net_log);
+
+  void set_enforce_net_security_expiration(bool enforce) {
+    enforce_net_security_expiration_ = enforce;
+  }
+
+ private:
+  // Returns true if the current build is recent enough to ensure that
+  // built-in security information (e.g. CT Logs) is fresh enough.
+  bool IsBuildTimely() const;
+
+  bool enforce_net_security_expiration_ = true;
 };
 
 }  // namespace net
diff --git net/http/transport_security_state.cc net/http/transport_security_state.cc
index 5e67d4c..0774364 100644
--- net/http/transport_security_state.cc
+++ net/http/transport_security_state.cc
@@ -1232,8 +1232,10 @@ void TransportSecurityState::SetShouldRequireCTForTesting(bool* required) {
   g_ct_required_for_testing = *required ? 1 : -1;
 }
 
-// static
-bool TransportSecurityState::IsBuildTimely() {
+bool TransportSecurityState::IsBuildTimely() const {
+  if (!enforce_net_security_expiration_)
+    return true;
+
   const base::Time build_time = base::GetBuildTime();
   // We consider built-in information to be timely for 10 weeks.
   return (base::Time::Now() - build_time).InDays() < 70 /* 10 weeks */;
diff --git net/http/transport_security_state.h net/http/transport_security_state.h
index c29f859..cc41507 100644
--- net/http/transport_security_state.h
+++ net/http/transport_security_state.h
@@ -446,6 +446,10 @@ class NET_EXPORT TransportSecurityState
   // nullptr to reset.
   static void SetShouldRequireCTForTesting(bool* required);
 
+  void set_enforce_net_security_expiration(bool enforce) {
+    enforce_net_security_expiration_ = enforce;
+  }
+
  private:
   friend class TransportSecurityStateTest;
   FRIEND_TEST_ALL_PREFIXES(HttpSecurityHeadersTest, UpdateDynamicPKPOnly);
@@ -469,7 +473,7 @@ class NET_EXPORT TransportSecurityState
   // IsBuildTimely returns true if the current build is new enough ensure that
   // built in security information (i.e. HSTS preloading and pinning
   // information) is timely.
-  static bool IsBuildTimely();
+  bool IsBuildTimely() const;
 
   // Helper method for actually checking pins.
   PKPStatus CheckPublicKeyPinsImpl(
@@ -557,6 +561,8 @@ class NET_EXPORT TransportSecurityState
   // True if static expect-staple state should be used.
   bool enable_static_expect_staple_;
 
+  bool enforce_net_security_expiration_ = true;
+
   ExpectCTReporter* expect_ct_reporter_ = nullptr;
 
   RequireCTDelegate* require_ct_delegate_ = nullptr;
